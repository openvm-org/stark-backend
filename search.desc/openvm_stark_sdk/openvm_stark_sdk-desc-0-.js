searchState.loadedDescShard("openvm_stark_sdk", 0, "A macro to create a <code>Vec&lt;Arc&lt;dyn AnyRap&lt;_&gt;&gt;&gt;</code> from a list of …\nVerifier cost estimation\nRun a function with metric collection enabled. The metrics …\nStark Config for root stark, which field is BabyBear but …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\nUses HorizenLabs Poseidon2 round constants, but plonky3 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLogs hash count statistics to stdout and returns as struct.\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLogs hash count statistics to stdout and returns as struct.\nThe permutation for outer recursion.\nReturns the argument unchanged.\nConjectured bits of security. See ethSTARK paper (…\nCalls <code>U::from(self)</code>.\nPre-defined FRI parameters with 100 bits of conjectured …\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\n<code>pcs_log_degree</code> is the upper bound on the log_2(PCS …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrapper to instrument a type to count function calls. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIdentifier for the hash permutation\nMmcs batch verification consist of hashing the leaf and …\nProperties of a multi-trace circuit necessary to estimate …\nWe currently ignore the constraint evaluation cost because …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>width</code> is number of base field columns. <code>max_log_height_lde</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nlog_2 Maximum height of an AIR trace.\nCost from MMCS batch verification.\nCost from MMCS batch verification.\n<code>max_log_height</code> is the trace height, before blowup.\n<code>width</code> is number of base field columns. <code>max_log_height</code> is …\nNumber of calls of 2-to-1 compression function.\nHash cost in terms of number of field elments to hash. To …\nNumber of single FRI fold evaluations: …\nTotal number of base field columns across all AIR traces …\nTotal number of base field columns across all AIR traces …\nNumber of operations of the form $+ \\alpha^? …\nDegree of quotient polynomial. This is …\nSome dummy AIRs for testing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe 0th number in the fibonacci sequence.\nThe 1st number in the fibonacci sequence.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTarget n-th number in the fibonacci sequence.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nn is number of rows in the trace\nAir with columns | count | fields[..] |\nNote: in principle, committing cached trace is out of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSend if true. Receive if false.\nIf true, then | count | and | fields[..] | are in separate …\n<code>stark-backend::prover::types::ProofInput</code> without …\nTesting engine\nStark engine using Fri.\nAll necessary data to verify a Stark proof.\nStark config\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new challenger with a deterministic state. …\nRuns a single end-to-end test for a given set of AIRs and …\nRuns a single end-to-end test for a given set of chips and …\nAdd AIRs and get AIR IDs\nDeterministic seeded RNG, for testing use")